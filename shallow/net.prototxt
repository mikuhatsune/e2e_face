name: "face-loc-pro-3"
layer {
 name: "data"
 type: "HDF5Data"
 top: "I"
 top: "Id"
 include { phase: TRAIN }
 hdf5_data_param {
   source: "../data/webface.txt"
   batch_size: 128
   shuffle: true
   scale: 0.00390625
   #crop_size: 120
   mirror: true
 }
}
# layer {
  # name: "data"
  # type: "ImageData"
  # top: "I"
  # top: "Id"
  # transform_param {
    # mirror:true
    # scale: 0.00390625
    # force_gray: true
  # }
  # include {
    # phase: TRAIN
  # }
  # image_data_param {
    # source: "../webface_images.txt"
    # root_folder: "../CASIA-WebFace/"
    # batch_size: 128
    # shuffle: true
    # is_color: false
  # }
# }
layer {
  name: "data"
  type: "Input"
  top: "I"
  include { phase: TEST }
  input_param { shape: { dim: 2 dim: 1 dim: 128 dim: 128 } }
}

layer {
  name: "tform/conv1"
  type: "Convolution"
  bottom: "I"
  top: "tform/conv1"
  param { lr_mult: 0.1 decay_mult: 0.1 }
  param { lr_mult: 0.2 decay_mult: 0 }
  convolution_param {
    num_output: 24
    kernel_size: 5
    stride: 1
    pad: 0
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}# 116
layer {
  name: "tform/pool1"
  type: "Pooling"
  bottom: "tform/conv1"
  top: "tform/pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}# 58
layer {
  name: "tform/relu1"
  type: "PReLU"
  bottom: "tform/pool1"
  top: "tform/pool1"
  param { lr_mult: 0.1 decay_mult: 0 }
}

layer {
  name: "tform/conv2"
  type: "Convolution"
  bottom: "tform/pool1"
  top: "tform/conv2"
  param { lr_mult: 0.1 decay_mult: 0.1 }
  param { lr_mult: 0.2 decay_mult: 0 }
  convolution_param {
    num_output: 48
    kernel_size: 3
    stride: 1
    pad: 0
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}# 56
layer {
  name: "tform/pool2"
  type: "Pooling"
  bottom: "tform/conv2"
  top: "tform/pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}# 28
layer {
  name: "tform/relu2"
  type: "PReLU"
  bottom: "tform/pool2"
  top: "tform/pool2"
  param { lr_mult: 0.1 decay_mult: 0 }
}

layer {
  name: "tform/conv3"
  type: "Convolution"
  bottom: "tform/pool2"
  top: "tform/conv3"
  param { lr_mult: 0.1 decay_mult: 0.1 }
  param { lr_mult: 0.2 decay_mult: 0 }
  convolution_param {
    num_output: 96
    kernel_size: 3
    stride: 1
    pad: 0
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}# 26
layer {
  name: "tform/pool3"
  type: "Pooling"
  bottom: "tform/conv3"
  top: "tform/pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}# 13
layer {
  name: "tform/relu3"
  type: "PReLU"
  bottom: "tform/pool3"
  top: "tform/pool3"
  param { lr_mult: 0.1 decay_mult: 0 }
}

layer {
  name: "tform/ip1"
  type: "InnerProduct"
  bottom: "tform/pool3"
  top: "tform/ip1"
  param { lr_mult: 0.1 decay_mult: 0.1 }
  param { lr_mult: 0.2 decay_mult: 0 }
  inner_product_param {
    num_output: 64
    weight_filler {
      type: "gaussian"
      std: 0.03
    }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "tform/ip1r"
  type: "PReLU"
  bottom: "tform/ip1"
  top: "tform/ip1"
  param { lr_mult: 0.1 decay_mult: 0 }
}
layer {
  name: "tform/ip2"
  type: "InnerProduct"
  bottom: "tform/ip1"
  top: "tform/ip2"
  param { lr_mult: 0.1 decay_mult: 0.1 }
  param { lr_mult: 0.2 decay_mult: 0 }
  inner_product_param {
    num_output: 64
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "tform/ip2r"
  type: "PReLU"
  bottom: "tform/ip2"
  top: "tform/ip2"
  param { lr_mult: 0.1 decay_mult: 0 }
}
layer {
  name: "tform"
  type: "InnerProduct"
  bottom: "tform/ip2"
  top: "tform"
  param { lr_mult: 0.1 decay_mult: 0.1 }
  param { lr_mult: 0.1 decay_mult: 0.2 }
  inner_product_param {
    num_output: 8
    weight_filler {
      #type: "constant" value: 0
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      #type: "file" file: "bias_init.txt"
      type: "value"
      values: 0.7 values: 0   values: 0
      values: 0   values: 0.7 values: 0
      values: 0   values: 0
    }
  }
}

layer {
  name: "st"
  type: "SpatialTransformer"
  bottom: "I"
  bottom: "tform"
  top: "st_output"
  st_param {
    output_H: 96
    output_W: 96
    transform_type: "projective"
    #fill_value: 0.3867
  }
}

layer {
  name: "tmp/conv1a"
  type: "Convolution"
  bottom: "st_output"
  top: "conv1a"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 32
    kernel_size: 3
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "tmp/relu1a"
  type: "PReLU"
  bottom: "conv1a"
  top: "conv1a"
}
# layer {
  # name: "r/conv1b"
  # type: "Convolution"
  # bottom: "conv1a"
  # top: "conv1b"
  # param {
    # lr_mult: 1
    # decay_mult: 1
  # }
  # param {
    # lr_mult: 2
    # decay_mult: 0
  # }
  # convolution_param {
    # num_output: 64
    # kernel_size: 3
    # stride: 1
    # weight_filler {
      # type: "xavier"
    # }
    # bias_filler {
      # type: "constant"
      # value: 0
    # }
  # }
# }
# layer {
  # name: "r/relu1b"
  # type: "PReLU"
  # bottom: "conv1b"
  # top: "conv1b"
# }
layer {
  name: "tmp/pool1b"
  type: "Pooling"
  bottom: "conv1a"
  top: "pool1b"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2 
  }
}
# layer {
  # name: "r/conv2_1"
  # type: "Convolution"
  # bottom: "pool1b"
  # top: "conv2_1"
  # param {
    # lr_mult: 1
    # decay_mult: 1
  # }
  # convolution_param {
    # num_output: 64
    # kernel_size: 3
    # stride: 1
    # pad: 1
    # weight_filler {
      # type: "gaussian"
      # std: 0.01
    # }
    # bias_term: false
  # }
# }
# layer {
  # name: "r/relu2_1"
  # type: "PReLU"
  # bottom: "conv2_1"
  # top: "conv2_1"
# }
# layer {
  # name: "r/conv2_2"
  # type: "Convolution"
  # bottom: "conv2_1"
  # top: "conv2_2"
  # param {
    # lr_mult: 1
    # decay_mult: 1
  # }
  # convolution_param {
    # num_output: 64
    # kernel_size: 3
    # stride: 1
    # pad: 1
    # weight_filler {
      # type: "gaussian"
      # std: 0.01
    # }
    # bias_term: false
  # }
# }
# layer {
  # name: "r/relu2_2"
  # type: "PReLU"
  # bottom: "conv2_2"
  # top: "conv2_2"
# }
# layer {
  # name: "r/res2_2"
  # type: "Eltwise"
  # bottom: "pool1b"
  # bottom: "conv2_2"
  # top: "res2_2"
  # eltwise_param { 
    # operation: 1
  # }
# }
layer {
  name: "tmp/conv2"
  type: "Convolution"
  bottom: "pool1b"
  top: "conv2"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 64 #128
    kernel_size: 3
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "tmp/relu2"
  type: "PReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "tmp/pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2 
  }
}

# layer {
  # name: "r/conv3_1"
  # type: "Convolution"
  # bottom: "pool2"
  # top: "conv3_1"
  # param {
    # lr_mult: 1
    # decay_mult: 1
  # }
  # convolution_param {
    # num_output: 128
    # kernel_size: 3
    # stride: 1
    # pad: 1
    # weight_filler {
      # type: "gaussian"
      # std: 0.01
    # }
    # bias_term: false
  # }
# }
# layer {
  # name: "r/relu3_1"
  # type: "PReLU"
  # bottom: "conv3_1"
  # top: "conv3_1"
# }
# layer {
  # name: "r/conv3_2"
  # type: "Convolution"
  # bottom: "conv3_1"
  # top: "conv3_2"
  # param {
    # lr_mult: 1
    # decay_mult: 1
  # }
  # convolution_param {
    # num_output: 128
    # kernel_size: 3
    # stride: 1
    # pad: 1
    # weight_filler {
      # type: "gaussian"
      # std: 0.01
    # }
    # bias_term: false
  # }
# }
# layer {
  # name: "r/relu3_2"
  # type: "PReLU"
  # bottom: "conv3_2"
  # top: "conv3_2"
# }
# layer {
  # name: "r/res3_2"
  # type: "Eltwise"
  # bottom: "pool2"
  # bottom: "conv3_2"
  # top: "res3_2"
  # eltwise_param { 
    # operation: 1
  # }
# }

layer {
  name: "tmp/conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 128 #256
    kernel_size: 3
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "tmp/relu3"
  type: "PReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "tmp/pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# layer {
  # name: "r/conv4_1"
  # type: "Convolution"
  # bottom: "pool3"
  # top: "conv4_1"
  # param {
    # lr_mult: 1
    # decay_mult: 1
  # }
  # convolution_param {
    # num_output: 256
    # kernel_size: 3
    # stride: 1
    # pad: 1
    # weight_filler {
      # type: "gaussian"
      # std: 0.01
    # }
    # bias_term: false
  # }
# }
# layer {
  # name: "r/relu4_1"
  # type: "PReLU"
  # bottom: "conv4_1"
  # top: "conv4_1"
# }
# layer {
  # name: "r/conv4_2"
  # type: "Convolution"
  # bottom: "conv4_1"
  # top: "conv4_2"
  # param {
    # lr_mult: 1
    # decay_mult: 1
  # }
  # convolution_param {
    # num_output: 256
    # kernel_size: 3
    # stride: 1
    # pad: 1
    # weight_filler {
      # type: "gaussian"
      # std: 0.01
    # }
    # bias_term: false
  # }
# }
# layer {
  # name: "r/relu4_2"
  # type: "PReLU"
  # bottom: "conv4_2"
  # top: "conv4_2"
# }
# layer {
  # name: "r/res4_2"
  # type: "Eltwise"
  # bottom: "pool3"
  # bottom: "conv4_2"
  # top: "res4_2"
  # eltwise_param { 
    # operation: 1
  # }
# }

layer {
  name: "tmp/conv4"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output: 256 #512
    kernel_size: 3
    stride: 1
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "tmp/relu4"
  type: "PReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "tmp/pool4"
  type: "Pooling"
  bottom: "conv4"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# layer {
  # name: "r/conv5_1"
  # type: "Convolution"
  # bottom: "pool4"
  # top: "conv5_1"
  # param {
    # lr_mult: 1
    # decay_mult: 1
  # }
  # convolution_param {
    # num_output: 512
    # kernel_size: 3
    # stride: 1
    # pad: 1
    # weight_filler {
      # type: "gaussian"
      # std: 0.01
    # }
    # bias_term: false
  # }
# }
# layer {
  # name: "r/relu5_1"
  # type: "PReLU"
  # bottom: "conv5_1"
  # top: "conv5_1"
# }
# layer {
  # name: "r/conv5_2"
  # type: "Convolution"
  # bottom: "conv5_1"
  # top: "conv5_2"
  # param {
    # lr_mult: 1
    # decay_mult: 1
  # }
  # convolution_param {
    # num_output: 512
    # kernel_size: 3
    # stride: 1
    # pad: 1
    # weight_filler {
      # type: "gaussian"
      # std: 0.01
    # }
    # bias_term: false
  # }
# }
# layer {
  # name: "r/relu5_2"
  # type: "PReLU"
  # bottom: "conv5_2"
  # top: "conv5_2"
# }
# layer {
  # name: "r/res5_2"
  # type: "Eltwise"
  # bottom: "pool4"
  # bottom: "conv5_2"
  # top: "res5_2"
  # eltwise_param { 
    # operation: 1
  # }
# }

layer {
  name: "tmp/fc5"
  type: "InnerProduct"
  bottom: "pool4"
  top: "fc5"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output: 512
    weight_filler { type: "xavier" }
    bias_filler { type: "constant" value: 0 }
  }
}

# layer {
  # name: "loss/softmax"
  # type: "MarginSoftmaxLoss"
  # bottom: "fc5"
  # bottom: "Id"
  # top: "loss"
  # param {
    # lr_mult: 1
    # decay_mult: 1
  # }
  # margin_softmax_loss_param {
    # num_output: 10575 #20752
    # lambda {
    #   policy: STEPUP
    #   value: 1000
    #   gamma: 0.31 #0.1
    #   step: 1500
    #   max: 1000
    #   min: 8
    # }
    # weight_filler {
      # type: "xavier"
      # #type: "gaussian" std: 0.03
    # }
  # }
# }

layer {
  name: "tmp/classifier"
  type: "InnerProduct"
  bottom: "fc5"
  top: "classifier"
  param { lr_mult: 1 decay_mult: 1 }
  inner_product_param {
    num_output: 10575
    weight_filler { type: "xavier" }
    bias_term: false
  }
  include { phase: TRAIN }
}

layer {
  name: "loss/softmax"
  type: "SoftmaxWithLoss"
  bottom: "classifier"
  bottom: "Id"
  top: "loss/softmax"
  include { phase: TRAIN }
}
layer {
  name: "loss/center"
  type: "CenterLoss"
  bottom: "fc5"
  bottom: "Id"
  top: "loss/center"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  center_loss_param {
    num_output: 10575
    center_filler {
      type: "xavier"
    }
  }
  loss_weight: 0.005
  include { phase: TRAIN }
}
